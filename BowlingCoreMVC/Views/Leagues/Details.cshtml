@model BowlingCoreMVC.Models.League

@{
    ViewData["Title"] = "Details";
}

<h2 class="text-center">@Html.DisplayFor(model => model.Name)</h2>
<hr />
<br />
@* TODO: Create a local LEague sheet here with weekly scores, league high scores, etc.

    What's on an actual league sheet:
        Team Standings
        High Individual Points
        High Individual Average
        Season High scores
            Team Handicap Series
            Team Handicap Game
            Team Scratch Series
            Team Scratch Game
            Scratch Game
            Scratch Series
            Handicap game
            Handicap series
        Last week top scores
            same as above
        Team Rosters
            Member, average, last week games + series, total games + pins, points

*@

<div>
    @if (ViewData["LastWeekSeries"] != null && ((List<Series>)ViewData["LastWeekSeries"]).Count > 0)
    {
        <h4>Last Week Scores</h4>
        <table class="table">
            <tr>
                <td>User</td>
                <td>Game 1</td>
                <td>Game 2</td>
                <td>Game 3</td>
                <td>Total</td>
            </tr>
            @foreach (Series s in (List<Series>)ViewData["LastWeekSeries"])
            {
                <tr>
                    <td>
                        <a asp-action="UserSummary" asp-controller="Stats" asp-route-id="@s.UserID">@s.UserName</a>
                    </td>
                    @foreach (Game g in (ICollection<Game>)s.Games)
                    {
                        <td>
                            <a asp-action="Details" asp-controller="Game" asp-route-id="@g.ID">@g.Score</a>
                        </td>
                    }
                    <td>
                        <a asp-action="Details" asp-controller="Series" asp-route-id="@s.ID">@Html.DisplayFor(modelItem => s.SeriesScore)</a>
                    </td>

                </tr>
            }
        </table>
    }

    @if (ViewData["LeagueAverages"] != null && ((List<ResultItem>)ViewData["LeagueAverages"]).Count > 0)
    {
        <h4>High Average</h4>
        <table class="table">
            <tr>
                <td>User</td>
                <td>Average</td>
            </tr>
            @foreach (var a in (List<ResultItem>)ViewData["LeagueAverages"])
            {
                <tr>
                    <td>
                        <a asp-action="UserSummary" asp-controller="Stats" asp-route-id="@a.UserID">@a.UserName</a>
                    </td>

                    <td>
                        @a.Average
                    </td>

                </tr>
            }
        </table>
    }

    @if (ViewData["HighestLeagueGame"] != null)
    {
        <h4>Game</h4>
        <table class="table">
            <tr>
                <td>User</td>
                <td>High Game</td>
            </tr>
            <tr>
                <td>
                    <a asp-action="UserSummary" asp-controller="Stats" asp-route-id="@(((Game)ViewData["HighestLeagueGame"]).UserID)">@(((Game)ViewData["HighestLeagueGame"]).UserName)</a>
                </td>

                <td>
                    <a asp-action="Details" asp-controller="Game" asp-route-id="@(((Game)ViewData["HighestLeagueGame"]).ID)">@(((Game)ViewData["HighestLeagueGame"]).Score)</a>
                </td>

            </tr>

        </table>
    }

    @if (ViewData["HighestLeagueSeries"] != null)
    {
        <h4>Series</h4>
        <table class="table">
            <tr>
                <td>User</td>
                <td>High Series</td>
            </tr>

            <tr>
                <td>
                    <a asp-action="UserSummary" asp-controller="Stats" asp-route-id="@(((Series)ViewData["HighestLeagueSeries"]).UserID)">@(((Series)ViewData["HighestLeagueSeries"]).UserName)</a>
                </td>

                <td>
                    <a asp-action="Details" asp-controller="Series" asp-route-id="@(((Series)ViewData["HighestLeagueSeries"]).ID)">@(((Series)ViewData["HighestLeagueSeries"]).SeriesScore)</a>
                </td>

            </tr>

        </table>
    }
</div>


<hr />

<h1>Teams</h1>

<a class="btn btn-primary" asp-action="Create" asp-controller="Teams" asp-route-LeagueID="@Model.ID" asp->New Team</a>
<a class="btn btn-warning" asp-action="Index" asp-controller="Teams" asp-route-id="@Model.ID" asp->Manage Teams</a>
<br />
<br />
@if (ViewData["TeamWeekData"] != null)
{


    @* This teams list should also reflect what a league sheet looks like:

        Team Name
            Member 1 ______  Avg ______ last week game 1, 2, 3, total
            Member 2 ______  Avg ______ last week game 1, 2, 3, total
            Member 3 ______  Avg ______ last week game 1, 2, 3, total
            Member 4 ______  Avg ______ last week game 1, 2, 3, total
            Member 5 ______  Avg ______ last week game 1, 2, 3, total

    *@

    @*<div class="card-deck">*@
    @*@foreach (Team t in (List<Team>)ViewData["Teams"])
        {
            @*this worked for an a tag: href="@Url.Action("Edit", "Teams", new { ID = t.ID })"@
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@t.TeamName</h5>
                    <p class="card-text">Team members and their averages/scores go here.</p>
                    <div class="card-footer">
                        @* IF CURRENT USER IS NOT ON ANY TEAM@
                        <button type="button" class="btn btn-secondary">Request to Join</button>
                    </div>
                </div>


            </div>
        }*@

    @foreach (TeamLastWeekData TeamWeekData in (List<TeamLastWeekData>)ViewData["TeamWeekData"])
    {
        <partial name="_TeamWeekSummary" model="TeamWeekData" />
    }
    @*</div>*@
}
